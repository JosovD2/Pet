apiVersion: v1
kind: Namespace
metadata:
  name: monitoring

---

apiVersion: v1
kind: Namespace
metadata:
  name: kubernetes-dashboard

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: josovd2/pet:latest
        ports:
        - containerPort: 80

---

apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: monitoring
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30080
  selector:
    app: nginx

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s

    scrape_configs:
      - job_name: 'Одна страница'
        static_configs:
          - targets: ['192.168.49.2:8080']

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:v2.39.0
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/prometheus.yml
          subPath: prometheus.yml
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config

---

apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
spec:
  type: NodePort
  ports:
  - port: 9090
    targetPort: 9090
    nodePort: 30090
  selector:
    app: prometheus

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:9.4.0
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin"
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
      volumes:
      - name: grafana-data
        persistentVolumeClaim:
          claimName: grafana-data

---

apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
spec:
  type: NodePort
  ports:
  - port: 3000
    targetPort: 3000
    nodePort: 30030
  selector:
    app: grafana

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-data
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
    spec:
      containers:
      - name: loki
        image: grafana/loki:2.7.0
        ports:
        - containerPort: 3100
        volumeMounts:
        - name: loki-config
          mountPath: /etc/loki/local-config.yaml
          subPath: local-config.yaml
      volumes:
      - name: loki-config
        configMap:
          name: loki-config

---

apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: monitoring
spec:
  type: NodePort
  ports:
  - port: 3100
    targetPort: 3100
    nodePort: 30031
  selector:
    app: loki

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: monitoring
data:
  local-config.yaml: |
    auth_enabled: false

    server:
      http_listen_port: 3100

    common:
      path_prefix: /loki
      storage:
        filesystem:
          chunks_directory: /loki/chunks
          rules_directory: /loki/rules
      replication_factor: 1
      ring:
        kvstore:
          store: inmemory

    schema_config:
      configs:
        - from: 2020-10-24
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: promtail
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: promtail
  template:
    metadata:
      labels:
        app: promtail
    spec:
      containers:
      - name: promtail
        image: grafana/promtail:2.7.0
        ports:
        - containerPort: 9080
        volumeMounts:
        - name: promtail-config
          mountPath: /etc/promtail/config.yaml
          subPath: config.yaml
        - name: varlog
          mountPath: /var/log
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: promtail-config
        configMap:
          name: promtail-config
      - name: varlog
        hostPath:
          path: /var/log
      - name: tmp
        hostPath:
          path: /tmp

---

apiVersion: v1
kind: Service
metadata:
  name: promtail
  namespace: monitoring
spec:
  type: NodePort
  ports:
  - port: 9080
    targetPort: 9080
    nodePort: 30032
  selector:
    app: promtail

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: promtail-config
  namespace: monitoring
data:
  config.yaml: |
    server:
      http_listen_port: 9080

    positions:
      filename: /tmp/positions.yaml

    clients:
      - url: http://192.168.49.2:3100/loki/api/v1/push

    scrape_configs:
      - job_name: system
        static_configs:
          - targets:
              - 192.168.49.2
            labels:
              job: varlogs
              instance: 192.168.49.2
              __path__: /var/log/*.log

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: cadvisor
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cadvisor
  template:
    metadata:
      labels:
        app: cadvisor
    spec:
      containers:
      - name: cadvisor
        image: gcr.io/cadvisor/cadvisor:latest
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: cadvisor-volume
          mountPath: /rootfs
          readOnly: true
        - name: cadvisor-varrun
          mountPath: /var/run
        - name: cadvisor-sys
          mountPath: /sys
        - name: cadvisor-docker
          mountPath: /var/lib/docker
          readOnly: true
      volumes:
      - name: cadvisor-volume
        hostPath:
          path: /
      - name: cadvisor-varrun
        hostPath:
          path: /var/run
      - name: cadvisor-sys
        hostPath:
          path: /sys
      - name: cadvisor-docker
        hostPath:
          path: /var/lib/docker

---

apiVersion: v1
kind: Service
metadata:
  name: cadvisor
  namespace: monitoring
spec:
  type: NodePort
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30033
  selector:
    app: cadvisor

---

apiVersion: v1
kind: Service
metadata:
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard
spec:
  type: NodePort
  ports:
    - port: 443
      targetPort: 8443
      nodePort: 32000
  selector:
    app: kubernetes-dashboard

